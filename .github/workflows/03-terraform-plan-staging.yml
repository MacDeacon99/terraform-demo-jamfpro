name: "03 - terraform plan: staging"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [staging]

env:
  TF_CLOUD_ORGANIZATION: "MacDeacon99"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-staging"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  PIPELINE_DEBUG: "true"

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  check-pr-origin:
    runs-on: ubuntu-latest
    steps:
    - name: Check PR Origin
      run: |
        if [ "${{ github.head_ref }}" != "sandbox" ]; then
          echo "PRs to staging can only come from the sandbox branch. This PR originates from ${{ github.head_ref }}."
          exit 1
        fi

  terraform-plan:
    needs: [check-pr-origin]
    name: "Terraform Plan for Staging"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v7.0.1
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output for Staging
              \`\`\`
              Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
              \`\`\`
              [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
              `;
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # send-notification:
  #   needs: [terraform-plan]
  #   if: always()
  #   uses: ./.github/workflows/send-notification.yml
  #   with:
  #     environment: "Staging"
  #     result: ${{ needs.terraform-plan.result == 'success' && 'success' || 'failure' }}
  #     notification_channel: msteams
  #   secrets: inherit